import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import '../../repositories/knowledge_gap_repository.dart';
import '../../repositories/content_repository.dart';
import '../../models/models.dart';
import '../../utils/result.dart';

class KnowledgeGapsChart extends StatefulWidget {
  final String userId;
  final String? subjectId; // Optional filter by subject
  final bool showRefresh;

  const KnowledgeGapsChart({
    super.key,
    required this.userId,
    this.subjectId,
    this.showRefresh = true,
  });

  @override
  State<KnowledgeGapsChart> createState() => _KnowledgeGapsChartState();
}

class _KnowledgeGapsChartState extends State<KnowledgeGapsChart> {
  late Future<Result<Map<String, int>>> _gapsFuture;
  late Future<Result<List<Topic>>> _topicsFuture;

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  void _loadData() {
    final gapRepo = Provider.of<KnowledgeGapRepository>(context, listen: false);
    _gapsFuture = gapRepo.getGapCountByTopic(widget.userId);

    final contentRepo = Provider.of<ContentRepository>(context, listen: false);
    _topicsFuture = contentRepo.getAllTopics();
  }

  Future<void> _refresh() async {
    setState(() {
      _loadData();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Knowledge Gaps',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                if (widget.showRefresh)
                  IconButton(
                    icon: const Icon(Icons.refresh),
                    onPressed: _refresh,
                  ),
              ],
            ),
            const SizedBox(height: 16),
            Expanded(
              child: FutureBuilder<List<Result>>(
                future: Future.wait([_gapsFuture, _topicsFuture]),
                builder: (context, AsyncSnapshot<List<Result>> snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }

                  if (snapshot.hasError || !snapshot.hasData) {
                    return Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Icon(Icons.error_outline, size: 48, color: Colors.red),
                          const SizedBox(height: 16),
                          Text('Error: ${snapshot.error ?? "Failed to load data"}'),
                          if (widget.showRefresh)
                            TextButton(
                              onPressed: _refresh,
                              child: const Text('Try Again'),
                            ),
                        ],
                      ),
                    );
                  }

                  final results = snapshot.data!;
                  if (results.length != 2) {
                    return const Center(child: Text('Incomplete data'));
                  }

                  final gapsResult = results[0] as Result<Map<String, int>>;
                  final topicsResult = results[1] as Result<List<Topic>>;

                  return gapsResult.fold(
                    (gaps) => topicsResult.fold(
                      (topics) {
                        if (gaps.isEmpty) {
                          return const Center(
                            child: Text('No knowledge gaps found'),
                          );
                        }

                        // Build topic name lookup map
                        final topicNames = {
                          for (var topic in topics) topic.id: topic.name
                        };

                        // Sort entries by gap count and format with topic names
                        final sortedEntries = gaps.entries
                            .map((entry) => MapEntry(
                                  topicNames[entry.key] ?? entry.key,
                                  entry.value,
                                ))
                            .toList()
                          ..sort((a, b) => b.value.compareTo(a.value));

                        // Take top 10 topics to avoid overcrowding
                        final displayEntries = sortedEntries.take(10).toList();
                      
                      // Calculate max Y with some padding
                      final maxY = (displayEntries.first.value * 1.2)
                          .ceil()
                          .toDouble();

                      return RotatedBox(
                        quarterTurns: 3,
                        child: BarChart(
                          BarChartData(
                            alignment: BarChartAlignment.spaceAround,
                            maxY: maxY,
                            barTouchData: BarTouchData(
                              enabled: true,
                              touchTooltipData: BarTouchTooltipData(
                                tooltipBgColor: Colors.blueGrey.shade900,
                                getTooltipItem: (group, groupIndex, rod, rodIndex) {
                                  return BarTooltipItem(
                                    '${displayEntries[group.x.toInt()].key}\n${rod.toY.toInt()} gaps',
                                    const TextStyle(
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  );
                                },
                              ),
                            ),
                            titlesData: FlTitlesData(
                              show: true,
                              bottomTitles: AxisTitles(
                                sideTitles: SideTitles(
                                  showTitles: true,
                                  reservedSize: 120,
                                  getTitlesWidget: (value, meta) {
                                    if (value < 0 || 
                                        value >= displayEntries.length) {
                                      return const SizedBox.shrink();
                                    }
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Padding(
                                        padding: const EdgeInsets.only(right: 8.0),
                                        child: SizedBox(
                                          width: 100,
                                          child: Text(
                                            displayEntries[value.toInt()].key,
                                            maxLines: 2,
                                            overflow: TextOverflow.ellipsis,
                                            style: const TextStyle(fontSize: 11),
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ),
                              leftTitles: AxisTitles(
                                sideTitles: SideTitles(
                                  showTitles: true,
                                  reservedSize: 40,
                                  getTitlesWidget: (value, meta) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Text(
                                        value.toInt().toString(),
                                        style: const TextStyle(fontSize: 10),
                                      ),
                                    );
                                  },
                                ),
                              ),
                              topTitles: const AxisTitles(
                                sideTitles: SideTitles(showTitles: false),
                              ),
                              rightTitles: const AxisTitles(
                                sideTitles: SideTitles(showTitles: false),
                              ),
                            ),
                            borderData: FlBorderData(
                              show: true,
                              border: Border.all(
                                color: Colors.grey.shade300,
                                width: 1,
                              ),
                            ),
                            barGroups: List.generate(
                              displayEntries.length,
                              (index) {
                                final entry = displayEntries[index];
                                final value = entry.value.toDouble();
                                final color = _getGapCountColor(value, maxY);
                                
                                return BarChartGroupData(
                                  x: index,
                                  barRods: [
                                    BarChartRodData(
                                      toY: value,
                                      color: color,
                                      width: 20,
                                      borderRadius: const BorderRadius.only(
                                        topLeft: Radius.circular(3),
                                        topRight: Radius.circular(3),
                                      ),
                                      backDrawRodData: BackgroundBarChartRodData(
                                        show: true,
                                        toY: maxY,
                                        color: color.withOpacity(0.1),
                                      ),
                                    ),
                                  ],
                                  showingTooltipIndicators: [0],
                                );
                              },
                            ),
                            gridData: FlGridData(
                              show: true,
                              drawVerticalLine: false,
                              horizontalInterval: maxY / 5,
                              getDrawingHorizontalLine: (value) {
                                return FlLine(
                                  color: Colors.grey.shade200,
                                  strokeWidth: 1,
                                );
                              },
                            ),
                          ),
                        ),
                      );
                    },
                    (failure) => Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Icon(Icons.error_outline, size: 48, color: Colors.red),
                          const SizedBox(height: 16),
                          Text('Error: ${failure.message}'),
                          if (widget.showRefresh)
                            TextButton(
                              onPressed: _refresh,
                              child: const Text('Try Again'),
                            ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Color _getGapCountColor(double value, double maxY) {
    final percentage = value / maxY;
    if (percentage <= 0.3) return Colors.blue;
    if (percentage <= 0.6) return Colors.orange;
    return Colors.red;
  }
}
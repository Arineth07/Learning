{
  "subject": {
    "id": "programming",
    "name": "Programming Fundamentals",
    "description": "Core programming concepts and problem-solving skills",
    "category": "programming",
    "topicIds": [
      "prog_variables",
      "prog_control_flow",
      "prog_functions",
      "prog_arrays",
      "prog_oop",
      "prog_sorting",
      "prog_data_structures"
    ],
    "createdAt": "2025-10-19T00:00:00Z",
    "updatedAt": "2025-10-19T00:00:00Z",
    "isActive": true
  },
  "topics": [
    {
      "id": "prog_variables",
      "name": "Variables and Data Types",
      "description": "Understanding variables, data types, and type conversion",
      "subjectId": "programming",
      "difficulty": "beginner",
      "estimatedDurationMinutes": 25,
      "prerequisiteTopicIds": [],
      "questionIds": [
        "prog_variables_beginner_001",
        "prog_variables_beginner_002",
        "prog_variables_beginner_003",
        "prog_variables_intermediate_001",
        "prog_variables_intermediate_002"
      ],
      "order": 1,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_control_flow",
      "name": "Control Flow",
      "description": "If-else statements, loops, and conditional logic",
      "subjectId": "programming",
      "difficulty": "beginner",
      "estimatedDurationMinutes": 30,
      "prerequisiteTopicIds": ["prog_variables"],
      "questionIds": [
        "prog_control_flow_beginner_001",
        "prog_control_flow_beginner_002",
        "prog_control_flow_beginner_003",
        "prog_control_flow_intermediate_001",
        "prog_control_flow_intermediate_002"
      ],
      "order": 2,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_functions",
      "name": "Functions",
      "description": "Function definition, parameters, return values, and scope",
      "subjectId": "programming",
      "difficulty": "intermediate",
      "estimatedDurationMinutes": 45,
      "prerequisiteTopicIds": ["prog_control_flow"],
      "questionIds": [
        "prog_functions_intermediate_001",
        "prog_functions_intermediate_002",
        "prog_functions_intermediate_003",
        "prog_functions_advanced_001",
        "prog_functions_advanced_002"
      ],
      "order": 3,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_arrays",
      "name": "Arrays and Lists",
      "description": "Array operations, indexing, and list manipulation",
      "subjectId": "programming",
      "difficulty": "intermediate",
      "estimatedDurationMinutes": 40,
      "prerequisiteTopicIds": ["prog_variables"],
      "questionIds": [
        "prog_arrays_intermediate_001",
        "prog_arrays_intermediate_002",
        "prog_arrays_intermediate_003",
        "prog_arrays_advanced_001",
        "prog_arrays_advanced_002"
      ],
      "order": 4,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_oop",
      "name": "Object-Oriented Programming",
      "description": "Classes, objects, inheritance, and encapsulation",
      "subjectId": "programming",
      "difficulty": "advanced",
      "estimatedDurationMinutes": 60,
      "prerequisiteTopicIds": ["prog_functions"],
      "questionIds": [
        "prog_oop_advanced_001",
        "prog_oop_advanced_002",
        "prog_oop_advanced_003",
        "prog_oop_expert_001",
        "prog_oop_expert_002"
      ],
      "order": 5,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_sorting",
      "name": "Algorithms - Sorting",
      "description": "Bubble sort, selection sort, and algorithm complexity",
      "subjectId": "programming",
      "difficulty": "advanced",
      "estimatedDurationMinutes": 50,
      "prerequisiteTopicIds": ["prog_arrays"],
      "questionIds": [
        "prog_sorting_advanced_001",
        "prog_sorting_advanced_002",
        "prog_sorting_advanced_003",
        "prog_sorting_expert_001",
        "prog_sorting_expert_002"
      ],
      "order": 6,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_data_structures",
      "name": "Data Structures",
      "description": "Stacks, queues, linked lists, and trees",
      "subjectId": "programming",
      "difficulty": "expert",
      "estimatedDurationMinutes": 90,
      "prerequisiteTopicIds": ["prog_oop", "prog_arrays"],
      "questionIds": [
        "prog_data_structures_advanced_001",
        "prog_data_structures_advanced_002",
        "prog_data_structures_expert_001",
        "prog_data_structures_expert_002",
        "prog_data_structures_expert_003"
      ],
      "order": 7,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    }
  ],
  "questions": [
    {
      "id": "prog_variables_beginner_001",
      "text": "Which of the following is a valid variable name in most programming languages?",
      "options": ["2variable", "variable_2", "variable-2", "variable 2"],
      "correctAnswer": "variable_2",
      "explanation": "Valid variable names:\n1. Cannot start with a number\n2. Cannot contain spaces\n3. Cannot contain special characters (except underscore)\n4. Can contain letters, numbers, and underscores",
      "topicId": "prog_variables",
      "difficulty": "beginner",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 10,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_variables_beginner_002",
      "text": "What is the value of x after: x = 5; x = x + 1;?",
      "options": ["5", "6", "51", "Error"],
      "correctAnswer": "6",
      "explanation": "Step by step:\n1. x = 5 assigns 5 to x\n2. x = x + 1 takes current value (5)\n3. Adds 1 to it: 5 + 1 = 6\n4. Assigns result back to x",
      "topicId": "prog_variables",
      "difficulty": "beginner",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 10,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_variables_beginner_003",
      "text": "Which data type should be used to store the value 3.14?",
      "options": ["int", "float", "char", "string"],
      "correctAnswer": "float",
      "explanation": "Data types for numbers:\n1. int - whole numbers (e.g., 1, -5, 1000)\n2. float - decimal numbers (e.g., 3.14, -0.5)\n3. char - single characters\n4. string - text",
      "topicId": "prog_variables",
      "difficulty": "beginner",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 10,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_variables_intermediate_001",
      "text": "What is type coercion?",
      "options": [
        "Automatic conversion between data types",
        "Declaring multiple variables at once",
        "Changing variable names",
        "Creating custom data types"
      ],
      "correctAnswer": "Automatic conversion between data types",
      "explanation": "Type coercion is:\n1. Automatic conversion of values\n2. Happens during operations\n3. Example: '5' + 2 might give '52'\n4. Can be implicit or explicit",
      "topicId": "prog_variables",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_variables_intermediate_002",
      "text": "What is the scope of a variable declared inside a function?",
      "options": [
        "Global scope",
        "Function scope",
        "Block scope",
        "Module scope"
      ],
      "correctAnswer": "Function scope",
      "explanation": "Function scope means:\n1. Variable only exists inside function\n2. Can't be accessed outside\n3. Created when function called\n4. Destroyed when function returns",
      "topicId": "prog_variables",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_control_flow_beginner_002",
      "text": "What will this code output: for (i = 1; i <= 3; i++) print(i);?",
      "options": ["1 2 3", "1 2", "2 3 4", "Error"],
      "correctAnswer": "1 2 3",
      "explanation": "The loop runs while i <= 3:\n1. i = 1: prints 1\n2. i = 2: prints 2\n3. i = 3: prints 3\n4. i = 4: stops (4 > 3)",
      "topicId": "prog_control_flow",
      "difficulty": "beginner",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 10,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_control_flow_beginner_003",
      "text": "What does break statement do in a loop?",
      "options": [
        "Exits the loop immediately",
        "Skips current iteration",
        "Restarts the loop",
        "Throws an error"
      ],
      "correctAnswer": "Exits the loop immediately",
      "explanation": "The break statement:\n1. Immediately stops loop execution\n2. Control moves to next statement after loop\n3. Used to exit early based on condition\n4. Works in for and while loops",
      "topicId": "prog_control_flow",
      "difficulty": "beginner",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 10,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_control_flow_intermediate_001",
      "text": "What is a switch statement used for?",
      "options": [
        "Multiple conditional branches",
        "Error handling",
        "Loop control",
        "Variable declaration"
      ],
      "correctAnswer": "Multiple conditional branches",
      "explanation": "Switch statements:\n1. Alternative to multiple if-else\n2. Compare single value against cases\n3. More readable for many conditions\n4. Often more efficient than if-else chains",
      "topicId": "prog_control_flow",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_control_flow_intermediate_002",
      "text": "What is the difference between while and do-while loops?",
      "options": [
        "do-while executes at least once",
        "while executes at least once",
        "No difference",
        "do-while is faster"
      ],
      "correctAnswer": "do-while executes at least once",
      "explanation": "Loop differences:\n1. while checks condition first\n2. do-while checks condition last\n3. do-while always runs once\n4. while may never run if condition false",
      "topicId": "prog_control_flow",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_control_flow_beginner_001",
      "text": "What will this code print? if (5 > 3): print('A') else: print('B')",
      "options": ["A", "B", "AB", "Error"],
      "correctAnswer": "A",
      "explanation": "Since 5 is greater than 3, the condition (5 > 3) evaluates to true.\nTherefore, the code inside the if block will execute, printing 'A'.",
      "topicId": "prog_control_flow",
      "difficulty": "beginner",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 10,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_functions_intermediate_001",
      "text": "What does this function return? def add(a, b): return a + b",
      "options": ["Sum of a and b", "Product of a and b", "None", "Error"],
      "correctAnswer": "Sum of a and b",
      "explanation": "The function 'add' takes two parameters 'a' and 'b' and uses the + operator to add them together.\nThe return statement sends the result back to the caller.",
      "topicId": "prog_functions",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_functions_intermediate_002",
      "text": "What is a lambda function?",
      "options": [
        "Anonymous function",
        "Named function",
        "Main function",
        "Recursive function"
      ],
      "correctAnswer": "Anonymous function",
      "explanation": "Lambda functions:\n1. Small anonymous functions\n2. Usually one-line expressions\n3. Can take parameters\n4. Often used with map/filter",
      "topicId": "prog_functions",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_functions_intermediate_003",
      "text": "What is function overloading?",
      "options": [
        "Same name, different parameters",
        "Same name, same parameters",
        "Different names, same parameters",
        "Different names, different parameters"
      ],
      "correctAnswer": "Same name, different parameters",
      "explanation": "Function overloading allows:\n1. Multiple functions, same name\n2. Different parameter types/count\n3. Compile-time polymorphism\n4. Better code organization",
      "topicId": "prog_functions",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_functions_advanced_001",
      "text": "What is a pure function?",
      "options": [
        "Same output for same input, no side effects",
        "Function without parameters",
        "Function that returns void",
        "Function with side effects"
      ],
      "correctAnswer": "Same output for same input, no side effects",
      "explanation": "Pure functions:\n1. Deterministic output\n2. No side effects\n3. Don't modify global state\n4. Easy to test and debug",
      "topicId": "prog_functions",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_functions_advanced_002",
      "text": "What is a closure?",
      "options": [
        "Function with access to parent scope",
        "Function that returns void",
        "Anonymous function",
        "Function with parameters"
      ],
      "correctAnswer": "Function with access to parent scope",
      "explanation": "Closures:\n1. Access outer function variables\n2. Preserve scope chain\n3. Enable data privacy\n4. Common in callbacks",
      "topicId": "prog_functions",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 150,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_arrays_intermediate_001",
      "text": "What is the index of the first element in an array?",
      "options": ["0", "1", "-1", "Depends on language"],
      "correctAnswer": "0",
      "explanation": "In most modern programming languages (including Python, JavaScript, Java, C++, and Dart),\narray indexing starts at 0. This is called zero-based indexing.",
      "topicId": "prog_arrays",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 60,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_arrays_intermediate_002",
      "text": "What is the time complexity of array indexing?",
      "options": ["O(1)", "O(n)", "O(log n)", "O(n²)"],
      "correctAnswer": "O(1)",
      "explanation": "Array indexing is O(1) because:\n1. Memory is contiguous\n2. Index calculation is simple math\n3. Direct memory access\n4. No searching needed",
      "topicId": "prog_arrays",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_arrays_intermediate_003",
      "text": "What is array slicing?",
      "options": [
        "Creating sub-array from range",
        "Sorting array",
        "Splitting array in half",
        "Removing elements"
      ],
      "correctAnswer": "Creating sub-array from range",
      "explanation": "Array slicing:\n1. Extract portion of array\n2. Specify start/end indices\n3. Creates new array\n4. Original array unchanged",
      "topicId": "prog_arrays",
      "difficulty": "intermediate",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 90,
      "points": 20,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_arrays_advanced_001",
      "text": "What is the difference between shallow and deep copy?",
      "options": [
        "Deep copies nested objects",
        "Deep is faster",
        "No difference",
        "Shallow uses less memory"
      ],
      "correctAnswer": "Deep copies nested objects",
      "explanation": "Copy differences:\n1. Shallow: copies references\n2. Deep: copies all data\n3. Nested objects need deep copy\n4. Shallow faster but limited",
      "topicId": "prog_arrays",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_arrays_advanced_002",
      "text": "What is array bounds checking?",
      "options": [
        "Validating index range",
        "Checking array length",
        "Sorting array",
        "Comparing arrays"
      ],
      "correctAnswer": "Validating index range",
      "explanation": "Bounds checking:\n1. Prevents buffer overflow\n2. Validates index in range\n3. Runtime safety feature\n4. May impact performance",
      "topicId": "prog_arrays",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_oop_advanced_001",
      "text": "What is encapsulation in OOP?",
      "options": ["Hiding implementation details", "Creating multiple objects", "Inheriting properties", "Overloading methods"],
      "correctAnswer": "Hiding implementation details",
      "explanation": "Encapsulation is one of the fundamental OOP principles that involves:\n1. Bundling data and methods that operate on that data within a single unit (class)\n2. Hiding internal details and providing an interface\n3. Controlling access to internal state through public methods",
      "topicId": "prog_oop",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_oop_advanced_002",
      "text": "What is polymorphism in OOP?",
      "options": [
        "Different forms of same interface",
        "Multiple inheritance",
        "Code reuse",
        "Data hiding"
      ],
      "correctAnswer": "Different forms of same interface",
      "explanation": "Polymorphism allows:\n1. Same interface, different implementations\n2. Runtime method selection\n3. Code flexibility\n4. Loose coupling",
      "topicId": "prog_oop",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_oop_advanced_003",
      "text": "What is an abstract class?",
      "options": [
        "Class with abstract methods",
        "Empty class",
        "Static class",
        "Final class"
      ],
      "correctAnswer": "Class with abstract methods",
      "explanation": "Abstract classes:\n1. Can't be instantiated\n2. May have abstract methods\n3. Must be inherited\n4. Provide common interface",
      "topicId": "prog_oop",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_oop_expert_001",
      "text": "What is the Liskov Substitution Principle?",
      "options": [
        "Subtypes must be substitutable",
        "Use interface segregation",
        "Single responsibility",
        "Open for extension"
      ],
      "correctAnswer": "Subtypes must be substitutable",
      "explanation": "LSP states:\n1. Derived classes must be substitutable\n2. Must maintain contracts\n3. No unexpected behavior\n4. Part of SOLID principles",
      "topicId": "prog_oop",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_oop_expert_002",
      "text": "What is the difference between composition and inheritance?",
      "options": [
        "Composition uses has-a, inheritance is-a",
        "Composition is slower",
        "Inheritance is more flexible",
        "No significant difference"
      ],
      "correctAnswer": "Composition uses has-a, inheritance is-a",
      "explanation": "Key differences:\n1. Inheritance: is-a relationship\n2. Composition: has-a relationship\n3. Composition more flexible\n4. Inheritance can cause tight coupling",
      "topicId": "prog_oop",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_sorting_advanced_001",
      "text": "What is the time complexity of quicksort?",
      "options": ["O(n log n)", "O(n²)", "O(n)", "O(log n)"],
      "correctAnswer": "O(n log n)",
      "explanation": "Quicksort complexity:\n1. Average case: O(n log n)\n2. Worst case: O(n²)\n3. Space: O(log n)\n4. In-place sorting",
      "topicId": "prog_sorting",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_sorting_advanced_002",
      "text": "Which sorting algorithm is stable?",
      "options": ["Merge sort", "Quick sort", "Heap sort", "Selection sort"],
      "correctAnswer": "Merge sort",
      "explanation": "Merge sort is stable:\n1. Preserves relative order\n2. O(n log n) complexity\n3. Requires extra space\n4. Divide and conquer",
      "topicId": "prog_sorting",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_sorting_advanced_003",
      "text": "What is the space complexity of bubble sort?",
      "options": ["O(1)", "O(n)", "O(log n)", "O(n log n)"],
      "correctAnswer": "O(1)",
      "explanation": "Bubble sort space:\n1. Only needs temp variable\n2. Sorts in-place\n3. No extra arrays needed\n4. Time complexity O(n²)",
      "topicId": "prog_sorting",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_sorting_expert_001",
      "text": "When should you use counting sort?",
      "options": [
        "Small range of integers",
        "Large range of integers",
        "Floating point numbers",
        "String sorting"
      ],
      "correctAnswer": "Small range of integers",
      "explanation": "Use counting sort when:\n1. Limited range of integers\n2. Space available\n3. O(n+k) time needed\n4. k is range of values",
      "topicId": "prog_sorting",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_sorting_expert_002",
      "text": "What is the worst case of quicksort and when does it occur?",
      "options": [
        "O(n²) with sorted input",
        "O(n log n) with sorted input",
        "O(n²) with random input",
        "O(n) with sorted input"
      ],
      "correctAnswer": "O(n²) with sorted input",
      "explanation": "Quicksort worst case:\n1. O(n²) time complexity\n2. Already sorted array\n3. Poor pivot selection\n4. Can be avoided with randomization",
      "topicId": "prog_sorting",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_data_structures_advanced_001",
      "text": "What is a hash table collision?",
      "options": [
        "Multiple keys hash same index",
        "Table is full",
        "Key not found",
        "Invalid hash function"
      ],
      "correctAnswer": "Multiple keys hash same index",
      "explanation": "Hash collisions:\n1. Same hash value\n2. Need resolution strategy\n3. Affects performance\n4. Common in hash tables",
      "topicId": "prog_data_structures",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_data_structures_advanced_002",
      "text": "What is a balanced binary tree?",
      "options": [
        "Heights differ by at most one",
        "Same number of nodes",
        "All leaves at same level",
        "Complete binary tree"
      ],
      "correctAnswer": "Heights differ by at most one",
      "explanation": "Balanced trees:\n1. Height difference ≤ 1\n2. Better performance\n3. Self-balancing types exist\n4. Example: AVL trees",
      "topicId": "prog_data_structures",
      "difficulty": "advanced",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 120,
      "points": 30,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_data_structures_expert_001",
      "text": "What is amortized time complexity?",
      "options": [
        "Average cost over many operations",
        "Worst case complexity",
        "Best case complexity",
        "Single operation cost"
      ],
      "correctAnswer": "Average cost over many operations",
      "explanation": "Amortized analysis:\n1. Sequence of operations\n2. Occasional expensive ops\n3. Overall average cost\n4. Example: dynamic array",
      "topicId": "prog_data_structures",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_data_structures_expert_002",
      "text": "What is a B-tree used for?",
      "options": [
        "Database indexing",
        "Memory management",
        "Network routing",
        "Graph traversal"
      ],
      "correctAnswer": "Database indexing",
      "explanation": "B-trees are used for:\n1. Database indexes\n2. File systems\n3. Large data sets\n4. Disk-based storage",
      "topicId": "prog_data_structures",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    },
    {
      "id": "prog_data_structures_expert_003",
      "text": "What is a Fibonacci heap?",
      "options": [
        "Priority queue with good amortized bounds",
        "Binary search tree variant",
        "Hash table implementation",
        "Graph representation"
      ],
      "correctAnswer": "Priority queue with good amortized bounds",
      "explanation": "Fibonacci heaps:\n1. Fast amortized operations\n2. Used in graph algorithms\n3. Complex implementation\n4. Theoretical importance",
      "topicId": "prog_data_structures",
      "difficulty": "expert",
      "type": "multipleChoice",
      "estimatedTimeSeconds": 180,
      "points": 40,
      "createdAt": "2025-10-19T00:00:00Z",
      "updatedAt": "2025-10-19T00:00:00Z",
      "isActive": true
    }
  ]
}